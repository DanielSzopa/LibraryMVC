// <auto-generated />
using System;
using LibraryMVC.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryMVC.WebApplication.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210916170546_InitializeExampleData")]
    partial class InitializeExampleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BookReservation", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "ReservationsId");

                    b.HasIndex("ReservationsId");

                    b.ToTable("BookReservation");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfAccommodation")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLocal")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "none",
                            FirstName = "none",
                            LastName = "none"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Polska dziennikarka i scenarzystka, autorka bestsellerowych powieści kryminalnych",
                            FirstName = "Katarzyna",
                            LastName = "Bonda"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Brytyjska autorka powieści kryminalnych i obyczajowych",
                            FirstName = "Agatha",
                            LastName = "Christie"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfBookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TypeOfBookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            CategoryId = 2,
                            DateOfRelease = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sasza Załuska zostaje przyjęta na cywilny etat do gdańskiej policji i natychmiast oddelegowana do zadania w Łodzi.",
                            PublisherId = 2,
                            Status = 2,
                            Title = "Lampiony",
                            TypeOfBookId = 2
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            CategoryId = 2,
                            DateOfRelease = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Historia zamożnego kupca warszawskiego Stanisława Wokulskiego i jego miłości do pięknej, lecz zubożałej arystokratki Izabeli Łęckiej.",
                            PublisherId = 3,
                            Status = 2,
                            Title = "Lalka",
                            TypeOfBookId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 2,
                            DateOfRelease = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ta epopeja narodowa (z elementami gawędy szlacheckiej) powstała w latach 1832–1834 w Paryżu.",
                            PublisherId = 3,
                            Status = 2,
                            Title = "Pan Tadeusz",
                            TypeOfBookId = 2
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CategoryId = 3,
                            DateOfRelease = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Czasopismo opowiadające o początku kariery Junior Developera",
                            PublisherId = 2,
                            Status = 2,
                            Title = "Biografia Daniela Szopy",
                            TypeOfBookId = 2
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            CategoryId = 2,
                            DateOfRelease = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Wesele” stanowi najważniejszy młodopolski dramat. w Łodzi.",
                            PublisherId = 2,
                            Status = 2,
                            Title = "Wesele",
                            TypeOfBookId = 2
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            CategoryId = 2,
                            DateOfRelease = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Historia dwojga ludzi, którzy zakochali się w Zakopanem",
                            PublisherId = 2,
                            Status = 2,
                            Title = "Miłość w Zakopanem",
                            TypeOfBookId = 2
                        });
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Book"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Newspaper"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pesel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.CustomerContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerContactDetails");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "New Era"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Opera"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationOrRental")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.TelephoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerContactDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerContactDetailId");

                    b.ToTable("TelephoneNumbers");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.TypeOfBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Crime Story"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romantic"
                        });
                });

            modelBuilder.Entity("BookReservation", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Domain.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Address", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.Customer", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("LibraryMVC.Domain.Models.Address", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Book", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Domain.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Domain.Models.TypeOfBook", "TypeOfBook")
                        .WithMany()
                        .HasForeignKey("TypeOfBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("TypeOfBook");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.CustomerContactDetail", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.Customer", "Customer")
                        .WithOne("CustomerContactDetail")
                        .HasForeignKey("LibraryMVC.Domain.Models.CustomerContactDetail", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Reservation", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.TelephoneNumber", b =>
                {
                    b.HasOne("LibraryMVC.Domain.Models.CustomerContactDetail", "CustomerContactDetail")
                        .WithMany("TelephoneNumbers")
                        .HasForeignKey("CustomerContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerContactDetail");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CustomerContactDetail");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("LibraryMVC.Domain.Models.CustomerContactDetail", b =>
                {
                    b.Navigation("TelephoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
